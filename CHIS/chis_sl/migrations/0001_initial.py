# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-03-22 00:02
from __future__ import unicode_literals

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(db_column='appDate', verbose_name='date and time of appointment')),
            ],
            options={
                'db_table': 'appointment',
            },
        ),
        migrations.CreateModel(
            name='Bed',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='bedName', help_text='ward name with specific number', max_length=100, verbose_name='the name of the bed')),
                ('status', models.CharField(choices=[('Available', 'Bed is Available'), ('Booked', 'Bed is Booked'), ('Faulty', 'Bed is Faulty'), ('Occupied', 'Bed is Occupied')], db_column='bedStatus', default='Available', max_length=10, verbose_name="bed's current status")),
            ],
            options={
                'db_table': 'bed',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_column='docFN', max_length=150, verbose_name="doctor's first name")),
                ('middle_name', models.CharField(blank=True, db_column='docMN', default=' ', max_length=150, verbose_name="doctor's middle name")),
                ('last_name', models.CharField(db_column='docLN', max_length=150, verbose_name="doctor's last name")),
                ('username', models.CharField(db_column='docUName', max_length=100, verbose_name="doctor's username")),
                ('email', models.EmailField(db_column='docEmail', max_length=100, verbose_name="doctor's email address")),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_column='docSex', default='M', max_length=1, verbose_name='select sex')),
                ('date_of_birth', models.DateField(db_column='docDOB', help_text='yyyy-mm-dd', verbose_name='date of birth')),
                ('address', models.CharField(db_column='docAddr', max_length=200, verbose_name="doctor's address")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='docCity', default='Freetown', max_length=20, verbose_name='select city')),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='docRegion', default='Western Urban', max_length=20, verbose_name="doctor's region")),
                ('phone_number', models.CharField(db_column='docPhone', help_text="doctor's phone number", max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="doctor's contact")),
                ('qualification', models.CharField(blank=True, db_column='docQualif', max_length=150, null=True, verbose_name="doctor's medical qualification")),
                ('speciality', models.CharField(blank=True, db_column='docSpe', max_length=200, null=True, verbose_name="doctor's speciality")),
                ('category', models.CharField(choices=[('Permanent', 'Permanent'), ('Trainee', 'Trainee'), ('Visiting', 'Visiting')], db_column='docCat', default='Permanent', max_length=20, verbose_name='select category')),
                ('work_experience', models.PositiveIntegerField(blank=True, db_column='docExp', null=True, verbose_name="doctor's work experience in years")),
                ('photo', models.ImageField(blank=True, db_column='docPhoto', help_text="doctor's Profile Photo", max_length=250, null=True, upload_to='doctor/', verbose_name='upload photo')),
            ],
            options={
                'db_table': 'doctor',
            },
        ),
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='drugName', max_length=200, verbose_name='name of drug')),
                ('type', models.CharField(db_column='drugType', max_length=100, verbose_name='the type of drug')),
                ('description', models.TextField(blank=True, db_column='drugDesc', null=True, verbose_name="drug's description")),
                ('quantity', models.PositiveIntegerField(db_column='drugQty', verbose_name='the quantity of a specific drug')),
                ('manufacture_date', models.DateField(db_column='drugMDate', verbose_name="drug's manufacture date")),
                ('expiry_date', models.DateField(db_column='drugEDate', verbose_name="drug's expiry date")),
            ],
            options={
                'db_table': 'drug',
            },
        ),
        migrations.CreateModel(
            name='History',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(db_column='hisNum', help_text='contains alpha-numeric characters', max_length=100, verbose_name="history's number")),
                ('description', models.TextField(db_column='hisDesc', verbose_name='brief description')),
                ('appointment', models.ForeignKey(db_column='appID', on_delete=django.db.models.deletion.CASCADE, related_name='history_appointment', to='chis_sl.Appointment', verbose_name='Select Appointment')),
                ('doctor', models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='history_doctor', to='chis_sl.Doctor', verbose_name='Select Doctor')),
            ],
            options={
                'db_table': 'history',
            },
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='hosName', max_length=200, verbose_name="hospital's name")),
                ('address', models.CharField(db_column='hosAddr', max_length=200, verbose_name="hospital's address")),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='hosRegion', default='Western Urban', max_length=20, verbose_name="hospital's region")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='hosCity', default='Freetown', max_length=20, verbose_name="hospital's location")),
                ('email', models.EmailField(db_column='hosEmail', max_length=100, unique=True, verbose_name="hospital's email address")),
                ('phone_number', models.CharField(db_column='hosPhone', max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="hospital's contact")),
                ('photo', models.ImageField(blank=True, db_column='hosPhoto', help_text='A picture of the hospital', max_length=250, null=True, upload_to='hospital/', verbose_name="hospital's photo")),
            ],
            options={
                'db_table': 'hospital',
            },
        ),
        migrations.CreateModel(
            name='Illness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='illName', max_length=200, verbose_name='name of illness')),
                ('type', models.CharField(db_column='illType', max_length=200, verbose_name='the type illness')),
            ],
            options={
                'db_table': 'illness',
            },
        ),
        migrations.CreateModel(
            name='MedicalTest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='testName', max_length=200, verbose_name='name of medical test')),
                ('date', models.DateTimeField(db_column='testDate', default=django.utils.timezone.now, verbose_name='date of medical test')),
                ('unit', models.CharField(blank=True, db_column='testUnit', max_length=200, null=True, verbose_name="medical test's unit")),
                ('doctor', models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='test_doctor', to='chis_sl.Doctor', verbose_name='test prescribed by doctor')),
            ],
            options={
                'db_table': 'medical_test',
            },
        ),
        migrations.CreateModel(
            name='Official',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_column='offFN', max_length=150, verbose_name="official's first name")),
                ('middle_name', models.CharField(blank=True, db_column='offMN', default=' ', max_length=100, verbose_name="official's middle name")),
                ('last_name', models.CharField(db_column='offLN', max_length=150, verbose_name="official's last name")),
                ('username', models.CharField(db_column='offUName', max_length=100, verbose_name="official's username")),
                ('email', models.EmailField(db_column='offEmail', max_length=100, unique=True, verbose_name="official's email address")),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_column='offSex', default='M', max_length=1, verbose_name='select sex')),
                ('date_of_birth', models.DateTimeField(db_column='offDOB', default=django.utils.timezone.now, help_text='yyyy-mm-dd', verbose_name="official's date of birth")),
                ('address', models.CharField(db_column='offAddr', max_length=200, verbose_name="official's address")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='offCity', default='Freetown', max_length=20, verbose_name='select city')),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='offRegion', default='Western Urban', max_length=20, verbose_name='choose region')),
                ('phone_number', models.CharField(db_column='offPhone', help_text="official's phone number", max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="official's contact")),
                ('photo', models.ImageField(blank=True, db_column='offPhoto', help_text="official's Profile Photo", max_length=250, null=True, upload_to='official/', verbose_name="official's photo")),
                ('unit', models.CharField(blank=True, db_column='offUnit', max_length=200, null=True, verbose_name="official's unit")),
                ('user', models.OneToOneField(db_column='userID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='officials', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'official_user',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_column='patFN', max_length=150, verbose_name="patient's first name")),
                ('middle_name', models.CharField(blank=True, db_column='patMN', default=' ', max_length=150, verbose_name="patient's middle name")),
                ('last_name', models.CharField(db_column='patLN', max_length=150, verbose_name="patient's last name")),
                ('username', models.CharField(db_column='patUName', max_length=100, verbose_name="patient's username")),
                ('email', models.EmailField(db_column='patEmail', max_length=100, unique=True, verbose_name="patient's email address")),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_column='patSex', default='M', max_length=1, verbose_name='select sex')),
                ('date_of_birth', models.DateField(db_column='patDOB', help_text='yyyy-mm-dd', verbose_name="patient's date of birth")),
                ('address', models.CharField(db_column='patAddr', max_length=200, verbose_name="patient's address")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='patCity', default='Freetown', max_length=20, verbose_name='select city')),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='patRegion', default='Western Urban', max_length=20, verbose_name='choose region')),
                ('phone_number', models.CharField(db_column='patPhone', help_text="patient's phone number", max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="patient's contact")),
                ('age', models.PositiveSmallIntegerField(db_column='patAge', default=0, help_text='age of the patient in years', verbose_name="patient's age")),
                ('blood_type', models.CharField(blank=True, choices=[('OP', 'O - Positive'), ('ON', 'O - Negative'), ('AP', 'A - Positive'), ('AN', 'A - Negative'), ('BP', 'B - Positive'), ('BN', 'B - Negative'), ('ABP', 'AB - Positive'), ('ABN', 'AB - Negative')], db_column='patBGroup', default='OP', max_length=3, null=True, verbose_name='choose blood type')),
                ('category', models.CharField(choices=[('IP', 'Inpatient'), ('OP', 'Outpatient')], db_column='patCat', default='OP', max_length=2, verbose_name='select category')),
                ('date_diagnosed', models.DateTimeField(blank=True, db_column='patDiagDate', default=django.utils.timezone.now, null=True, verbose_name="patient diagnosis' date")),
                ('admission_date', models.DateTimeField(blank=True, db_column='patADate', null=True, verbose_name="patient's admission date")),
                ('discharge_date', models.DateTimeField(blank=True, db_column='patDDate', null=True, verbose_name="patient's discharged date")),
                ('photo', models.ImageField(blank=True, db_column='patPhoto', help_text="patient's Profile Photo", max_length=250, null=True, upload_to='patient/', verbose_name="patient's photo")),
                ('doctor', models.ForeignKey(blank=True, db_column='docID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_doctor', to='chis_sl.Doctor', verbose_name='the assigned doctor')),
                ('hospital', models.ForeignKey(blank=True, db_column='hosID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_hospital', to='chis_sl.Hospital', verbose_name='the related hospital')),
            ],
            options={
                'db_table': 'patient',
            },
        ),
        migrations.CreateModel(
            name='Pharmacy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='phaName', max_length=200, verbose_name="pharmacy's name")),
                ('address', models.CharField(db_column='phaAddr', max_length=250, verbose_name="pharmacy's address")),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='phaRegion', default='Western Urban', max_length=20, verbose_name="pharmacy's region")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='phaCity', default='Freetown', max_length=20, verbose_name="pharmacy's location")),
                ('photo', models.ImageField(blank=True, db_column='phaPhoto', help_text='A picture of the pharmacy', max_length=250, null=True, upload_to='pharmacy/', verbose_name="pharmacy's photo")),
                ('phone_number', models.CharField(db_column='phaPhone', max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="pharmacy's contact")),
                ('email', models.EmailField(blank=True, db_column='phaEmail', max_length=100, null=True, verbose_name="pharmacy's email address")),
                ('pharmacist', models.CharField(db_column='pharmacist', max_length=100, verbose_name="pharmacist's full name")),
                ('hospital', models.ForeignKey(blank=True, db_column='hosID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pharmacy', to='chis_sl.Hospital', verbose_name='the related hospital')),
            ],
            options={
                'db_table': 'pharmacy',
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='presName', help_text='give a suitable name to the prescription', max_length=200, verbose_name='name of prescription')),
                ('date', models.DateTimeField(db_column='presDate', default=django.utils.timezone.now, verbose_name='date of prescription')),
                ('drug_dosage', models.CharField(db_column='drugDos', max_length=200, verbose_name="drug's dosage")),
                ('doctor', models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='prescription_doctor', to='chis_sl.Doctor', verbose_name='prescription issued by doctor')),
                ('illness', models.ForeignKey(db_column='illID', on_delete=django.db.models.deletion.CASCADE, related_name='prescription_illness', to='chis_sl.Illness', verbose_name="illness' prescription")),
                ('patient', models.ForeignKey(blank=True, db_column='patID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_patient', to='chis_sl.Patient', verbose_name="patient's prescription")),
            ],
            options={
                'db_table': 'prescription',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(db_column='recNum', help_text='contains alpha-numeric characters', max_length=50, verbose_name='medical recommendation number')),
                ('medical_rec', models.TextField(db_column='recText', verbose_name='medical recommendations')),
                ('date', models.DateTimeField(db_column='recDate', default=django.utils.timezone.now, verbose_name='date recommendation is issued')),
                ('status', models.CharField(choices=[('New', 'New Medical Recommendation'), ('Pending', 'Medical Recommendation not yet Applied'), ('Applied', 'Medical Recommendation already Applied')], db_column='recStatus', default='New', max_length=50, verbose_name='status of medical recommendation')),
                ('doctor', models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_doctor', to='chis_sl.Doctor', verbose_name='doctor making recommendation')),
                ('patient', models.ForeignKey(db_column='patID', on_delete=django.db.models.deletion.CASCADE, related_name='recommendation_patient', to='chis_sl.Patient', verbose_name='patient receiving medical recommendation')),
            ],
            options={
                'db_table': 'medical_recommendation',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='rptName', max_length=150, verbose_name='name of report')),
                ('content', models.TextField(db_column='rptCont', verbose_name="report's content")),
                ('date', models.DateTimeField(db_column='rptDate', default=django.utils.timezone.now, verbose_name="report's date")),
                ('doctor', models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='report_doctor', to='chis_sl.Doctor', verbose_name='doctor in report')),
                ('history', models.ForeignKey(blank=True, db_column='hisID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='report_history', to='chis_sl.History', verbose_name='history containing report')),
                ('patient', models.ForeignKey(db_column='patID', on_delete=django.db.models.deletion.CASCADE, related_name='report_patient', to='chis_sl.Patient', verbose_name='patient in report')),
            ],
            options={
                'db_table': 'report',
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_column='staFN', max_length=150, verbose_name="staff's first name")),
                ('middle_name', models.CharField(blank=True, db_column='staMN', default=' ', max_length=150, verbose_name="staff's middle name")),
                ('last_name', models.CharField(db_column='staLN', max_length=150, verbose_name="staff's last name")),
                ('username', models.CharField(db_column='staUName', max_length=100, verbose_name="staff's username")),
                ('email', models.EmailField(db_column='staEmail', max_length=100, unique=True, verbose_name="staff's email address")),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], db_column='staSex', default='M', max_length=1, verbose_name='select sex')),
                ('date_of_birth', models.DateField(db_column='staDOB', help_text='yyyy-mm-dd', verbose_name="staff's date of birth")),
                ('address', models.CharField(db_column='staAddr', max_length=200, verbose_name="staff's address")),
                ('city', models.CharField(choices=[('Bo', 'Bo City'), ('Bonthe', 'Bonthe City'), ('Falaba', 'Falaba City'), ('Freetown', 'Freetown City'), ('Kabala', 'Kabala City'), ('Kailahun', 'Kailahun City'), ('Kambia', 'Kambia City'), ('Karene', 'Karena City'), ('Kenema', 'Kenema City'), ('Magburaka', 'Magburaka City'), ('Makeni', 'Makeni City'), ('Moyamba', 'Moyamba City'), ('Port Loko', 'Port Loko City'), ('Pujehun', 'Pujehun City'), ('Sefadu', 'Sefadu City'), ('Waterloo', 'Waterloo City')], db_column='staCity', default='Freetown', max_length=20, verbose_name='select city')),
                ('region', models.CharField(choices=[('Eastern Region', 'Eastern Region'), ('Northern Region', 'Northern Region'), ('North West', 'North West'), ('Southern Region', 'Southern Region'), ('Western Rural', 'Western Rural'), ('Western Urban', 'Western Urban')], db_column='staRegion', default='Western Urban', max_length=20, verbose_name='choose region')),
                ('phone_number', models.CharField(db_column='staPhone', help_text="staff's phone number", max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+\\d{8,15}$')], verbose_name="staff's contact")),
                ('photo', models.ImageField(blank=True, db_column='staPhoto', help_text="staff's Profile Photo", max_length=250, null=True, upload_to='staff/', verbose_name="staff's photo")),
                ('hospital', models.ForeignKey(db_column='hosID', on_delete=django.db.models.deletion.CASCADE, related_name='staff_hospital', to='chis_sl.Hospital', verbose_name="staff's related hospital")),
                ('user', models.OneToOneField(db_column='userID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='staffs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'hospital_staff',
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_column='wardName', max_length=200, verbose_name="ward's name")),
                ('number', models.IntegerField(db_column='wardNum', null=True, verbose_name="ward's numerical identifier")),
                ('hospital', models.ForeignKey(db_column='hosID', on_delete=django.db.models.deletion.CASCADE, related_name='ward', to='chis_sl.Hospital', verbose_name='the related hospital')),
            ],
            options={
                'db_table': 'ward',
            },
        ),
        migrations.AddField(
            model_name='report',
            name='staff',
            field=models.ForeignKey(blank=True, db_column='staID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='report_staff', to='chis_sl.Staff', verbose_name='report generated by staff'),
        ),
        migrations.AddField(
            model_name='patient',
            name='the_staff',
            field=models.ForeignKey(blank=True, db_column='staID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_staff', to='chis_sl.Staff', verbose_name='the staff who created the patient'),
        ),
        migrations.AddField(
            model_name='patient',
            name='user',
            field=models.OneToOneField(db_column='userID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patients', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='patient',
            name='ward',
            field=models.ForeignKey(blank=True, db_column='wardID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_ward', to='chis_sl.Ward', verbose_name='ward in which the patient is admitted'),
        ),
        migrations.AddField(
            model_name='medicaltest',
            name='patient',
            field=models.ForeignKey(db_column='patID', on_delete=django.db.models.deletion.CASCADE, related_name='test_patient', to='chis_sl.Patient', verbose_name='test prescribed for patient'),
        ),
        migrations.AddField(
            model_name='illness',
            name='patient',
            field=models.ForeignKey(blank=True, db_column='patID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='illness_patient', to='chis_sl.Patient', verbose_name='the affected patient'),
        ),
        migrations.AddField(
            model_name='history',
            name='illness',
            field=models.ForeignKey(db_column='illID', on_delete=django.db.models.deletion.CASCADE, related_name='history_illness', to='chis_sl.Illness', verbose_name='Choose Illness'),
        ),
        migrations.AddField(
            model_name='history',
            name='patient',
            field=models.ForeignKey(blank=True, db_column='patID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history_patient', to='chis_sl.Patient', verbose_name='Select Patient'),
        ),
        migrations.AddField(
            model_name='history',
            name='prescription',
            field=models.ForeignKey(blank=True, db_column='presID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='history_prescription', to='chis_sl.Prescription', verbose_name='Prescription'),
        ),
        migrations.AddField(
            model_name='drug',
            name='patient',
            field=models.ForeignKey(blank=True, db_column='patID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='patient_drug', to='chis_sl.Patient', verbose_name="the patient's drug"),
        ),
        migrations.AddField(
            model_name='drug',
            name='pharmacy',
            field=models.ForeignKey(db_column='phaID', on_delete=django.db.models.deletion.CASCADE, related_name='pharmacy_drug', to='chis_sl.Pharmacy', verbose_name="the pharmacy's drugs"),
        ),
        migrations.AddField(
            model_name='drug',
            name='prescription',
            field=models.ForeignKey(blank=True, db_column='presID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prescription_drug', to='chis_sl.Prescription', verbose_name='prescription of drugs'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='hospital',
            field=models.ForeignKey(blank=True, db_column='hosID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_hospital', to='chis_sl.Hospital', verbose_name='select related hospital'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='the_staff',
            field=models.ForeignKey(blank=True, db_column='staID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_staff', to='chis_sl.Staff', verbose_name='the staff who added the doctor'),
        ),
        migrations.AddField(
            model_name='doctor',
            name='user',
            field=models.OneToOneField(db_column='userID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doctors', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='bed',
            name='assigned_patient',
            field=models.ForeignKey(blank=True, db_column='patID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bed_patient', to='chis_sl.Patient', verbose_name='the assigned patient'),
        ),
        migrations.AddField(
            model_name='bed',
            name='contained_ward',
            field=models.ForeignKey(db_column='wardID', on_delete=django.db.models.deletion.CASCADE, related_name='bed_ward', to='chis_sl.Ward', verbose_name='ward containing the bed'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='doctor',
            field=models.ForeignKey(db_column='docID', on_delete=django.db.models.deletion.CASCADE, related_name='appointment_doctor', to='chis_sl.Doctor', verbose_name='the designated doctor'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='patient',
            field=models.ForeignKey(db_column='patID', on_delete=django.db.models.deletion.CASCADE, related_name='appointment_patient', to='chis_sl.Patient', verbose_name='the designated patient'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='staff',
            field=models.ForeignKey(blank=True, db_column='staID', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='appointment_staff', to='chis_sl.Staff', verbose_name='the designated staff'),
        ),
        migrations.AlterUniqueTogether(
            name='recommendation',
            unique_together=set([('number', 'doctor', 'patient')]),
        ),
    ]
